////////////////////////////////////// 
procedure _I_sumtab_ai_i
    frame size: 0
    formal parameters: 1
    cfg entry point: L0
    cfg entry point successors: [L2]
    cfg exit point: L1
    cfg exit point predecessors : [L4, L6]
L2:
    cfg successors: [L3]
    cfg predecessors: [L0]
    move %tmp1, 0
    move %tmp2, 0
    length %tmp3, %tmp0
    move %tmp4, %tmp3
    jump L3
L3:
    cfg successors: [L4, L5]
    cfg predecessors: [L2, L5]

    branch lt, %tmp2, %tmp4, L5, L4
L4:
    cfg successors: [L1]
    cfg predecessors: [L3]

    return [%tmp1]
L5:
    cfg successors: [L3]
    cfg predecessors: [L3]
    loadarray %tmp5, %tmp0, %tmp2 // %tmp5 = %tmp0[%tmp2]
    add %tmp6, %tmp1, %tmp5
    move %tmp1, %tmp6
    add %tmp7, %tmp2, 1
    move %tmp2, %tmp7
    jump L3
L6:
    cfg successors: [L1]
    cfg predecessors: []

    return []
////////////////////////////////////// 
procedure _I_main__i
    frame size: 0
    formal parameters: 0
    cfg entry point: L0
    cfg entry point successors: [L2]
    cfg exit point: L1
    cfg exit point predecessors : [L2, L3]
L2:
    cfg successors: [L1]
    cfg predecessors: [L0]
    newarray %tmp0, 10
    storearray %tmp0, 0, 0 // %tmp0[0] = 0
    storearray %tmp0, 1, 1 // %tmp0[1] = 1
    storearray %tmp0, 2, 2 // %tmp0[2] = 2
    storearray %tmp0, 3, 3 // %tmp0[3] = 3
    storearray %tmp0, 4, 4 // %tmp0[4] = 4
    storearray %tmp0, 5, 5 // %tmp0[5] = 5
    storearray %tmp0, 6, 6 // %tmp0[6] = 6
    storearray %tmp0, 7, 7 // %tmp0[7] = 7
    storearray %tmp0, 8, 8 // %tmp0[8] = 8
    storearray %tmp0, 9, 9 // %tmp0[9] = 9
    move %tmp1, %tmp0
    call [%tmp2], _I_sumtab_ai_i, [%tmp1], kill []
    call [], _I_printInt_i_, [%tmp2], kill []
    return [0]
L3:
    cfg successors: [L1]
    cfg predecessors: []

    return []
