////////////////////////////////////// 
procedure _I_main__i
    frame size: 0
    formal parameters: 0
    cfg entry point: L0
    cfg entry point successors: [L2]
    cfg exit point: L1
    cfg exit point predecessors : [L2, L3]
L2:
    cfg successors: [L1]
    cfg predecessors: [L0]
    mul %tmp1, 2, 1
    mul %tmp2, 3, 2
    mul %tmp26, 6, 4
    add %tmp26, 24, 4
    call [%tmp0], _xi_alloc, [28], kill []
    add %tmp0, %tmp0, 4
    storemem %tmp0, -4, 6 // mem[%tmp0 + -4] = 6
    loadmem %tmp3, %tmp0, 0 // %tmp3 = mem[%tmp0 + 0]
    storemem %tmp3, 0, 1 // mem[%tmp3 + 0] = 1
    loadmem %tmp4, %tmp0, 0 // %tmp4 = mem[%tmp0 + 0]
    storemem %tmp4, 4, 2 // mem[%tmp4 + 4] = 2
    loadmem %tmp5, %tmp0, 0 // %tmp5 = mem[%tmp0 + 0]
    storemem %tmp5, 8, 3 // mem[%tmp5 + 8] = 3
    loadmem %tmp6, %tmp0, 4 // %tmp6 = mem[%tmp0 + 4]
    storemem %tmp6, 0, 10 // mem[%tmp6 + 0] = 10
    loadmem %tmp7, %tmp0, 4 // %tmp7 = mem[%tmp0 + 4]
    storemem %tmp7, 4, 20 // mem[%tmp7 + 4] = 20
    loadmem %tmp8, %tmp0, 4 // %tmp8 = mem[%tmp0 + 4]
    storemem %tmp8, 8, 30 // mem[%tmp8 + 8] = 30
    loadmem %tmp9, %tmp0, 0 // %tmp9 = mem[%tmp0 + 0]
    loadmem %tmp10, %tmp9, 0 // %tmp10 = mem[%tmp9 + 0]
    loadmem %tmp11, %tmp0, 0 // %tmp11 = mem[%tmp0 + 0]
    loadmem %tmp12, %tmp11, 4 // %tmp12 = mem[%tmp11 + 4]
    add %tmp13, %tmp10, %tmp12
    loadmem %tmp14, %tmp0, 0 // %tmp14 = mem[%tmp0 + 0]
    loadmem %tmp15, %tmp14, 8 // %tmp15 = mem[%tmp14 + 8]
    add %tmp16, %tmp13, %tmp15
    loadmem %tmp17, %tmp0, 4 // %tmp17 = mem[%tmp0 + 4]
    loadmem %tmp18, %tmp17, 0 // %tmp18 = mem[%tmp17 + 0]
    add %tmp19, %tmp16, %tmp18
    loadmem %tmp20, %tmp0, 4 // %tmp20 = mem[%tmp0 + 4]
    loadmem %tmp21, %tmp20, 4 // %tmp21 = mem[%tmp20 + 4]
    add %tmp22, %tmp19, %tmp21
    loadmem %tmp23, %tmp0, 4 // %tmp23 = mem[%tmp0 + 4]
    loadmem %tmp24, %tmp23, 8 // %tmp24 = mem[%tmp23 + 8]
    add %tmp25, %tmp22, %tmp24
    return [%tmp25]
L3:
    cfg successors: [L1]
    cfg predecessors: []

    return []
