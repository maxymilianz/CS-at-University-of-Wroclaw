////////////////////////////////////// 
procedure _I_main__i
    frame size: 0
    formal parameters: 0
    cfg entry point: L0
    cfg entry point successors: [L2]
    cfg exit point: L1
    cfg exit point predecessors : [L2]
L2:
    cfg successors: [L1]
    cfg predecessors: [L0]
    def [%hard16, %hard17, %hard18, %hard19, %hard20, %hard21, %hard22, %hard23]
    move %hard4, 28
    call [%hard2], _xi_alloc, [%hard4], kill [%hard1, %hard2, %hard3, %hard4, %hard5, %hard6, %hard7, %hard8, %hard9, %hard10, %hard11, %hard12, %hard13, %hard14, %hard15, %hard24, %hard25]
    add %hard2, %hard2, 4
    move %hard1, 6
    storemem %hard2, -4, %hard1 // mem[%hard2 + -4] = %hard1
    loadmem %hard3, %hard2, 0 // %hard3 = mem[%hard2 + 0]
    move %hard1, 1
    storemem %hard3, 0, %hard1 // mem[%hard3 + 0] = %hard1
    loadmem %hard3, %hard2, 0 // %hard3 = mem[%hard2 + 0]
    move %hard1, 2
    storemem %hard3, 4, %hard1 // mem[%hard3 + 4] = %hard1
    loadmem %hard3, %hard2, 0 // %hard3 = mem[%hard2 + 0]
    move %hard1, 3
    storemem %hard3, 8, %hard1 // mem[%hard3 + 8] = %hard1
    loadmem %hard3, %hard2, 4 // %hard3 = mem[%hard2 + 4]
    move %hard1, 10
    storemem %hard3, 0, %hard1 // mem[%hard3 + 0] = %hard1
    loadmem %hard3, %hard2, 4 // %hard3 = mem[%hard2 + 4]
    move %hard1, 20
    storemem %hard3, 4, %hard1 // mem[%hard3 + 4] = %hard1
    loadmem %hard3, %hard2, 4 // %hard3 = mem[%hard2 + 4]
    move %hard1, 30
    storemem %hard3, 8, %hard1 // mem[%hard3 + 8] = %hard1
    loadmem %hard1, %hard2, 0 // %hard1 = mem[%hard2 + 0]
    loadmem %hard3, %hard1, 0 // %hard3 = mem[%hard1 + 0]
    loadmem %hard1, %hard2, 0 // %hard1 = mem[%hard2 + 0]
    loadmem %hard1, %hard1, 4 // %hard1 = mem[%hard1 + 4]
    add %hard3, %hard3, %hard1
    loadmem %hard1, %hard2, 0 // %hard1 = mem[%hard2 + 0]
    loadmem %hard1, %hard1, 8 // %hard1 = mem[%hard1 + 8]
    add %hard3, %hard3, %hard1
    loadmem %hard1, %hard2, 4 // %hard1 = mem[%hard2 + 4]
    loadmem %hard1, %hard1, 0 // %hard1 = mem[%hard1 + 0]
    add %hard3, %hard3, %hard1
    loadmem %hard1, %hard2, 4 // %hard1 = mem[%hard2 + 4]
    loadmem %hard1, %hard1, 4 // %hard1 = mem[%hard1 + 4]
    add %hard1, %hard3, %hard1
    loadmem %hard2, %hard2, 4 // %hard2 = mem[%hard2 + 4]
    loadmem %hard2, %hard2, 8 // %hard2 = mem[%hard2 + 8]
    add %hard2, %hard1, %hard2
    use [%hard16, %hard17, %hard18, %hard19, %hard20, %hard21, %hard22, %hard23]
    return [%hard2]
