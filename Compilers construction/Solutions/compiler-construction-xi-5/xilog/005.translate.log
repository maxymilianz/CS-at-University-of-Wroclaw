Mod_uwr__Translator: Environment.add_proc: added mapping printString -> _I_printString_ai_
Mod_uwr__Translator: Environment.add_proc: added mapping sort -> _I_sort_ai_
Mod_uwr__Translator: Environment.add_proc: added mapping main -> _I_main__i
Mod_uwr__Translator: translate_global_definition: =========== 01_sort.xi:3:1 - sort
Mod_uwr__Translator: Environment.add_var: added mapping a -> %tmp0
Mod_uwr__Translator: allocate_block: new block is L2
Mod_uwr__Translator: translate_block: >>> 01_sort.xi:3:16: -- current_bb=L2
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:4:3: i:int = 0 -- current_bb=L2
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:4:11: 0 -- current_bb=L2
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:4:11: 0 - current_bb=L2 res=0
Mod_uwr__Translator: Environment.add_var: added mapping i -> %tmp1
Mod_uwr__Translator: append_instruction: block=L2: move %tmp1, 0
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:4:3: i:int = 0 -- current_bb=L2
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:5:3: n:int = length(a) -- current_bb=L2
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:5:11: length(a) -- current_bb=L2
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:5:18: a -- current_bb=L2
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:5:18: a - current_bb=L2 res=%tmp0
Mod_uwr__Translator: append_instruction: block=L2: length %tmp2, %tmp0
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:5:11: length(a) - current_bb=L2 res=%tmp2
Mod_uwr__Translator: Environment.add_var: added mapping n -> %tmp3
Mod_uwr__Translator: append_instruction: block=L2: move %tmp3, %tmp2
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:5:3: n:int = length(a) -- current_bb=L2
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:6:3: while ( (i < n) );{;  j:int = i;  while ( (j > 0) );  {;    if ( (a[(j - 1)] > a[j]) );    {;      swap:int = a[j];      a[j] = a[(j - 1)];      a[(j - 1)] = swap;    };    j = (j - 1);  };  i = (i + 1);} -- current_bb=L2
Mod_uwr__Translator: allocate_block: new block is L3
Mod_uwr__Translator: set_terminator: block=L2: jump L3
Mod_uwr__Translator: allocate_block: new block is L4
Mod_uwr__Translator: translate_condition: >>> 01_sort.xi:6:10: (i < n) -- current_bb=L3 alt_bb=L4
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:6:10: i -- current_bb=L3
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:6:10: i - current_bb=L3 res=%tmp1
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:6:14: n -- current_bb=L3
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:6:14: n - current_bb=L3 res=%tmp3
Mod_uwr__Translator: allocate_block: new block is L5
Mod_uwr__Translator: set_terminator: block=L3: branch lt, %tmp1, %tmp3, L5, L4
Mod_uwr__Translator: translate_condition: <<< 01_sort.xi:6:10: (i < n) - current_bb=L5
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:6:17: {;  j:int = i;  while ( (j > 0) );  {;    if ( (a[(j - 1)] > a[j]) );    {;      swap:int = a[j];      a[j] = a[(j - 1)];      a[(j - 1)] = swap;    };    j = (j - 1);  };  i = (i + 1);} -- current_bb=L5
Mod_uwr__Translator: translate_block: >>> 01_sort.xi:6:17: -- current_bb=L5
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:7:7: j:int = i -- current_bb=L5
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:7:15: i -- current_bb=L5
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:7:15: i - current_bb=L5 res=%tmp1
Mod_uwr__Translator: Environment.add_var: added mapping j -> %tmp4
Mod_uwr__Translator: append_instruction: block=L5: move %tmp4, %tmp1
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:7:7: j:int = i -- current_bb=L5
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:8:7: while ( (j > 0) );{;  if ( (a[(j - 1)] > a[j]) );  {;    swap:int = a[j];    a[j] = a[(j - 1)];    a[(j - 1)] = swap;  };  j = (j - 1);} -- current_bb=L5
Mod_uwr__Translator: allocate_block: new block is L6
Mod_uwr__Translator: set_terminator: block=L5: jump L6
Mod_uwr__Translator: allocate_block: new block is L7
Mod_uwr__Translator: translate_condition: >>> 01_sort.xi:8:14: (j > 0) -- current_bb=L6 alt_bb=L7
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:8:14: j -- current_bb=L6
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:8:14: j - current_bb=L6 res=%tmp4
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:8:18: 0 -- current_bb=L6
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:8:18: 0 - current_bb=L6 res=0
Mod_uwr__Translator: allocate_block: new block is L8
Mod_uwr__Translator: set_terminator: block=L6: branch gt, %tmp4, 0, L8, L7
Mod_uwr__Translator: translate_condition: <<< 01_sort.xi:8:14: (j > 0) - current_bb=L8
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:8:21: {;  if ( (a[(j - 1)] > a[j]) );  {;    swap:int = a[j];    a[j] = a[(j - 1)];    a[(j - 1)] = swap;  };  j = (j - 1);} -- current_bb=L8
Mod_uwr__Translator: translate_block: >>> 01_sort.xi:8:21: -- current_bb=L8
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:9:9: if ( (a[(j - 1)] > a[j]) );{;  swap:int = a[j];  a[j] = a[(j - 1)];  a[(j - 1)] = swap;} -- current_bb=L8
Mod_uwr__Translator: allocate_block: new block is L9
Mod_uwr__Translator: allocate_block: new block is L10
Mod_uwr__Translator: translate_condition: >>> 01_sort.xi:9:13: (a[(j - 1)] > a[j]) -- current_bb=L8 alt_bb=L10
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:9:13: a[(j - 1)] -- current_bb=L8
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:9:15: (j - 1) -- current_bb=L8
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:9:15: j -- current_bb=L8
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:9:15: j - current_bb=L8 res=%tmp4
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:9:17: 1 -- current_bb=L8
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:9:17: 1 - current_bb=L8 res=1
Mod_uwr__Translator: append_instruction: block=L8: sub %tmp5, %tmp4, 1
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:9:15: (j - 1) - current_bb=L8 res=%tmp5
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:9:13: a -- current_bb=L8
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:9:13: a - current_bb=L8 res=%tmp0
Mod_uwr__Translator: append_instruction: block=L8: loadarray %tmp6, %tmp0, %tmp5 // %tmp6 = %tmp0[%tmp5]
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:9:13: a[(j - 1)] - current_bb=L8 res=%tmp6
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:9:22: a[j] -- current_bb=L8
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:9:24: j -- current_bb=L8
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:9:24: j - current_bb=L8 res=%tmp4
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:9:22: a -- current_bb=L8
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:9:22: a - current_bb=L8 res=%tmp0
Mod_uwr__Translator: append_instruction: block=L8: loadarray %tmp7, %tmp0, %tmp4 // %tmp7 = %tmp0[%tmp4]
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:9:22: a[j] - current_bb=L8 res=%tmp7
Mod_uwr__Translator: allocate_block: new block is L11
Mod_uwr__Translator: set_terminator: block=L8: branch gt, %tmp6, %tmp7, L11, L10
Mod_uwr__Translator: translate_condition: <<< 01_sort.xi:9:13: (a[(j - 1)] > a[j]) - current_bb=L11
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:9:28: {;  swap:int = a[j];  a[j] = a[(j - 1)];  a[(j - 1)] = swap;} -- current_bb=L11
Mod_uwr__Translator: translate_block: >>> 01_sort.xi:9:28: -- current_bb=L11
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:10:13: swap:int = a[j] -- current_bb=L11
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:10:24: a[j] -- current_bb=L11
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:10:26: j -- current_bb=L11
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:10:26: j - current_bb=L11 res=%tmp4
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:10:24: a -- current_bb=L11
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:10:24: a - current_bb=L11 res=%tmp0
Mod_uwr__Translator: append_instruction: block=L11: loadarray %tmp8, %tmp0, %tmp4 // %tmp8 = %tmp0[%tmp4]
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:10:24: a[j] - current_bb=L11 res=%tmp8
Mod_uwr__Translator: Environment.add_var: added mapping swap -> %tmp9
Mod_uwr__Translator: append_instruction: block=L11: move %tmp9, %tmp8
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:10:13: swap:int = a[j] -- current_bb=L11
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:11:13: a[j] = a[(j - 1)] -- current_bb=L11
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:11:20: a[(j - 1)] -- current_bb=L11
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:11:22: (j - 1) -- current_bb=L11
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:11:22: j -- current_bb=L11
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:11:22: j - current_bb=L11 res=%tmp4
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:11:24: 1 -- current_bb=L11
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:11:24: 1 - current_bb=L11 res=1
Mod_uwr__Translator: append_instruction: block=L11: sub %tmp10, %tmp4, 1
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:11:22: (j - 1) - current_bb=L11 res=%tmp10
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:11:20: a -- current_bb=L11
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:11:20: a - current_bb=L11 res=%tmp0
Mod_uwr__Translator: append_instruction: block=L11: loadarray %tmp11, %tmp0, %tmp10 // %tmp11 = %tmp0[%tmp10]
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:11:20: a[(j - 1)] - current_bb=L11 res=%tmp11
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:11:13: a -- current_bb=L11
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:11:13: a - current_bb=L11 res=%tmp0
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:11:15: j -- current_bb=L11
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:11:15: j - current_bb=L11 res=%tmp4
Mod_uwr__Translator: store_to_lvalue: storing %tmp11 to %tmp0[%tmp4] -- current_bb=L11
Mod_uwr__Translator: append_instruction: block=L11: storearray %tmp0, %tmp4, %tmp11 // %tmp0[%tmp4] = %tmp11
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:11:13: a[j] = a[(j - 1)] -- current_bb=L11
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:12:13: a[(j - 1)] = swap -- current_bb=L11
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:12:22: swap -- current_bb=L11
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:12:22: swap - current_bb=L11 res=%tmp9
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:12:13: a -- current_bb=L11
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:12:13: a - current_bb=L11 res=%tmp0
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:12:15: (j - 1) -- current_bb=L11
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:12:15: j -- current_bb=L11
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:12:15: j - current_bb=L11 res=%tmp4
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:12:17: 1 -- current_bb=L11
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:12:17: 1 - current_bb=L11 res=1
Mod_uwr__Translator: append_instruction: block=L11: sub %tmp12, %tmp4, 1
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:12:15: (j - 1) - current_bb=L11 res=%tmp12
Mod_uwr__Translator: store_to_lvalue: storing %tmp9 to %tmp0[%tmp12] -- current_bb=L11
Mod_uwr__Translator: append_instruction: block=L11: storearray %tmp0, %tmp12, %tmp9 // %tmp0[%tmp12] = %tmp9
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:12:13: a[(j - 1)] = swap -- current_bb=L11
Mod_uwr__Translator: translate_block: <<< 01_sort.xi:9:28: -- current_bb=L11
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:9:28: {;  swap:int = a[j];  a[j] = a[(j - 1)];  a[(j - 1)] = swap;} -- current_bb=L11
Mod_uwr__Translator: set_terminator: block=L11: jump L9
Mod_uwr__Translator: set_terminator: block=L10: jump L9
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:9:9: if ( (a[(j - 1)] > a[j]) );{;  swap:int = a[j];  a[j] = a[(j - 1)];  a[(j - 1)] = swap;} -- current_bb=L9
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:14:9: j = (j - 1) -- current_bb=L9
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:14:13: (j - 1) -- current_bb=L9
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:14:13: j -- current_bb=L9
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:14:13: j - current_bb=L9 res=%tmp4
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:14:15: 1 -- current_bb=L9
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:14:15: 1 - current_bb=L9 res=1
Mod_uwr__Translator: append_instruction: block=L9: sub %tmp13, %tmp4, 1
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:14:13: (j - 1) - current_bb=L9 res=%tmp13
Mod_uwr__Translator: store_to_lvalue: storing %tmp13 to j -- current_bb=L9
Mod_uwr__Translator: append_instruction: block=L9: move %tmp4, %tmp13
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:14:9: j = (j - 1) -- current_bb=L9
Mod_uwr__Translator: translate_block: <<< 01_sort.xi:8:21: -- current_bb=L9
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:8:21: {;  if ( (a[(j - 1)] > a[j]) );  {;    swap:int = a[j];    a[j] = a[(j - 1)];    a[(j - 1)] = swap;  };  j = (j - 1);} -- current_bb=L9
Mod_uwr__Translator: set_terminator: block=L9: jump L6
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:8:7: while ( (j > 0) );{;  if ( (a[(j - 1)] > a[j]) );  {;    swap:int = a[j];    a[j] = a[(j - 1)];    a[(j - 1)] = swap;  };  j = (j - 1);} -- current_bb=L7
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:16:7: i = (i + 1) -- current_bb=L7
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:16:11: (i + 1) -- current_bb=L7
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:16:11: i -- current_bb=L7
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:16:11: i - current_bb=L7 res=%tmp1
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:16:13: 1 -- current_bb=L7
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:16:13: 1 - current_bb=L7 res=1
Mod_uwr__Translator: append_instruction: block=L7: add %tmp14, %tmp1, 1
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:16:11: (i + 1) - current_bb=L7 res=%tmp14
Mod_uwr__Translator: store_to_lvalue: storing %tmp14 to i -- current_bb=L7
Mod_uwr__Translator: append_instruction: block=L7: move %tmp1, %tmp14
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:16:7: i = (i + 1) -- current_bb=L7
Mod_uwr__Translator: translate_block: <<< 01_sort.xi:6:17: -- current_bb=L7
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:6:17: {;  j:int = i;  while ( (j > 0) );  {;    if ( (a[(j - 1)] > a[j]) );    {;      swap:int = a[j];      a[j] = a[(j - 1)];      a[(j - 1)] = swap;    };    j = (j - 1);  };  i = (i + 1);} -- current_bb=L7
Mod_uwr__Translator: set_terminator: block=L7: jump L3
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:6:3: while ( (i < n) );{;  j:int = i;  while ( (j > 0) );  {;    if ( (a[(j - 1)] > a[j]) );    {;      swap:int = a[j];      a[j] = a[(j - 1)];      a[(j - 1)] = swap;    };    j = (j - 1);  };  i = (i + 1);} -- current_bb=L4
Mod_uwr__Translator: translate_block: <<< 01_sort.xi:3:16: -- current_bb=L4
Mod_uwr__Translator: translate_global_definition: =========== 01_sort.xi:21:1 - main
Mod_uwr__Translator: allocate_block: new block is L2
Mod_uwr__Translator: translate_block: >>> 01_sort.xi:22:1: -- current_bb=L2
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:23:5: x:int[] = Wroclaw -- current_bb=L2
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:23:15: Wroclaw -- current_bb=L2
Mod_uwr__Translator: append_instruction: block=L2: newarray %tmp0, 7
Mod_uwr__Translator: append_instruction: block=L2: storearray %tmp0, 0, 87 // %tmp0[0] = 87
Mod_uwr__Translator: append_instruction: block=L2: storearray %tmp0, 1, 114 // %tmp0[1] = 114
Mod_uwr__Translator: append_instruction: block=L2: storearray %tmp0, 2, 111 // %tmp0[2] = 111
Mod_uwr__Translator: append_instruction: block=L2: storearray %tmp0, 3, 99 // %tmp0[3] = 99
Mod_uwr__Translator: append_instruction: block=L2: storearray %tmp0, 4, 108 // %tmp0[4] = 108
Mod_uwr__Translator: append_instruction: block=L2: storearray %tmp0, 5, 97 // %tmp0[5] = 97
Mod_uwr__Translator: append_instruction: block=L2: storearray %tmp0, 6, 119 // %tmp0[6] = 119
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:23:15: Wroclaw - current_bb=L2 res=%tmp0
Mod_uwr__Translator: Environment.add_var: added mapping x -> %tmp1
Mod_uwr__Translator: append_instruction: block=L2: move %tmp1, %tmp0
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:23:5: x:int[] = Wroclaw -- current_bb=L2
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:24:5: sort(x) -- current_bb=L2
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:24:10: x -- current_bb=L2
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:24:10: x - current_bb=L2 res=%tmp1
Mod_uwr__Translator: append_instruction: block=L2: call [], _I_sort_ai_, [%tmp1], kill []
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:24:5: sort(x) -- current_bb=L2
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:25:5: printString(x) -- current_bb=L2
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:25:17: x -- current_bb=L2
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:25:17: x - current_bb=L2 res=%tmp1
Mod_uwr__Translator: append_instruction: block=L2: call [], _I_printString_ai_, [%tmp1], kill []
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:25:5: printString(x) -- current_bb=L2
Mod_uwr__Translator: translate_statement: >>> 01_sort.xi:26:5: return 1 -- current_bb=L2
Mod_uwr__Translator: translate_expression: >>> 01_sort.xi:26:12: 1 -- current_bb=L2
Mod_uwr__Translator: translate_expression: <<< 01_sort.xi:26:12: 1 - current_bb=L2 res=1
Mod_uwr__Translator: set_terminator: block=L2: return [1]
Mod_uwr__Translator: allocate_block: new block is L3
Mod_uwr__Translator: translate_statement: <<< 01_sort.xi:26:5: return 1 -- current_bb=L3
Mod_uwr__Translator: translate_block: <<< 01_sort.xi:22:1: -- current_bb=L3
Xi_lib__Logger: Dumping 006.translate.translated.ir
